name: Build with Cache and Artifacts Demo

on:
  push:
    branches: [ "main", "develop", "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    # Example of explicit Maven dependency caching
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
    
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Example of multiple artifact uploads
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: target/*.jar
        retention-days: 5
        compression-level: 9

    - name: Upload Test Reports
      if: always()  # Upload even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: target/surefire-reports/
        retention-days: 1
        compression-level: 6

  # Example of artifact download in another job
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/

      - name: Display structure of downloaded files
        run: ls -R target/

  # Add Docker build and push job
  docker:
    needs: [build, test]  # Run after build and test jobs complete
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Download the built JAR
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/
      
      # Set up Docker
      - name: Set up Docker
        uses: docker/setup-docker@v2

      # Print Docker info
      - name: Docker Info
        run: docker info

      # Login to Docker Hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
        
      # Build and push Docker images
      - name: Build and Push Docker Images
        env:
          DOCKER_IMAGE_NAME: "spring-boot-hello-world-for-kamran"
          DOCKER_REGISTRY: "docker.io"
        run: |
          echo "Building Docker image..."
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$DOCKER_IMAGE_NAME:${{ github.sha }} .
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$DOCKER_IMAGE_NAME:latest .
          
          echo "Pushing Docker images to Docker Hub..."
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$DOCKER_IMAGE_NAME:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$DOCKER_IMAGE_NAME:latest
          echo "Docker images pushed successfully!"
