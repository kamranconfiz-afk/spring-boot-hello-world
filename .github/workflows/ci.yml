name: Build, Test, and Docker Push with Vault Secrets

on:
  push:
    branches: [ "main", "develop", "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    # Cache Maven dependencies
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
    
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Upload build artifacts
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: target/*.jar
        retention-days: 5
        compression-level: 9

    - name: Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: target/surefire-reports/
        retention-days: 1
        compression-level: 6

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/

      - name: Display structure of downloaded files
        run: ls -R target/

  docker:
    needs: [build, test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      # Download the built JAR
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/

      # Fetch Docker credentials from Vault
      - name: Fetch Docker credentials from Vault
        env:
          VAULT_ADDR: "http://13.233.118.161:8200"
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}  # Store Vault root token or approle token in GitHub Secrets
        run: |
          echo "Reading Docker credentials from Vault..."
          SECRET_JSON=$(curl --header "X-Vault-Token: $VAULT_TOKEN" \
                             --silent \
                             --request GET \
                             $VAULT_ADDR/v1/kv/data/docker_cred)
          
          echo "Parsing credentials..."
          DOCKER_USERNAME=$(echo $SECRET_JSON | jq -r '.data.data.DOCKER_USERNAME')
          DOCKER_PASSWORD=$(echo $SECRET_JSON | jq -r '.data.data.DOCKER_PASSWORD')
          
          # Mask secrets
          echo "::add-mask::$DOCKER_USERNAME"
          echo "::add-mask::$DOCKER_PASSWORD"
          
          echo "DOCKER_USERNAME=$DOCKER_USERNAME" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=$DOCKER_PASSWORD" >> $GITHUB_ENV

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Print Docker info
      - name: Docker Info
        run: docker info

      # Login to Docker Hub using credentials from Vault
      - name: Docker Login
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      # Build and push Docker images
      - name: Build and Push Docker Images
        env:
          DOCKER_IMAGE_NAME: "spring-boot-hello-world-for-kamran"
        run: |
          echo "Building Docker image..."
          docker build -t ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${GITHUB_SHA} .
          docker build -t ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest .
          
          echo "Pushing Docker images to Docker Hub..."
          docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${GITHUB_SHA}
          docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest
          echo "Docker images pushed successfully!"
