name: Matrix Build, Vault Integration & Docker Push

on:
  push:
    branches: [ "main", "develop", "master" ]

jobs:
  # =========================
  # 1. Build & Test (Matrix)
  # =========================
  build-test:
    name: Build & Test on ${{ matrix.os }} with Java ${{ matrix.java }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        java: [8]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      # Setup Java
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'

      # Fix Windows Temp Path to avoid long paths
      - name: Fix Windows Temp Path
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "TEMP=D:\\temp" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "TMP=D:\\temp" | Out-File -FilePath $env:GITHUB_ENV -Append
          New-Item -ItemType Directory -Force -Path D:\temp

      # Set Maven Options
      - name: Set Maven Options
        run: echo "MAVEN_OPTS=-Xmx1024m -Djava.io.tmpdir=$RUNNER_TEMP" >> $GITHUB_ENV

      # Cache Maven Dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Build & Test
      - name: Build and Test with Maven
        run: mvn -B clean verify --file pom.xml

      # Upload JAR artifact (only from Ubuntu build)
      - name: Upload Build Artifact
        if: matrix.os == 'ubuntu-latest' && matrix.java == '8'
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar
          retention-days: 5
          compression-level: 9

      # Upload Test Reports
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.os }}-java${{ matrix.java }}
          path: target/surefire-reports/
          retention-days: 2
          compression-level: 6

  # =========================
  # 2. Docker Build & Push
  # =========================
  docker:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Download JAR from previous job
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/

      # Install jq for JSON parsing
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Fetch Docker credentials from Vault
      - name: Fetch Docker credentials from Vault
        env:
          VAULT_ADDR: "http://13.233.118.161:8200"
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
        run: |
          echo "Reading Docker credentials from Vault..."
          SECRET_JSON=$(curl --header "X-Vault-Token: $VAULT_TOKEN" \
                             --silent \
                             --request GET \
                             $VAULT_ADDR/v1/kv/data/docker_cred)

          echo "Parsing credentials..."
          DOCKER_USERNAME=$(echo $SECRET_JSON | jq -r '.data.data.DOCKER_USERNAME')
          DOCKER_PASSWORD=$(echo $SECRET_JSON | jq -r '.data.data.DOCKER_PASSWORD')

          echo "::add-mask::$DOCKER_USERNAME"
          echo "::add-mask::$DOCKER_PASSWORD"

          echo "DOCKER_USERNAME=$DOCKER_USERNAME" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=$DOCKER_PASSWORD" >> $GITHUB_ENV

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Docker Hub
      - name: Login to Docker Hub
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      # Build and Push Docker Images
      - name: Build and Push Docker Images
        env:
          DOCKER_IMAGE_NAME: "spring-boot-hello-world-for-kamran"
        run: |
          echo "Building Docker image..."
          docker build -t ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${GITHUB_SHA} .
          docker tag ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${GITHUB_SHA} ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest

          echo "Pushing Docker images to Docker Hub..."
          docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${GITHUB_SHA}
          docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest
          echo "Docker images pushed successfully!"
