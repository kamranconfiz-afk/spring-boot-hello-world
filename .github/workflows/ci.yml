name: Matrix Build, Test, and Docker Push with Vault

on:
  push:
    branches: [ "main", "develop", "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        java: [8]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'

    # Fix for Windows Surefire issues
    - name: Fix Windows environment
      if: runner.os == 'Windows'
      run: |
        echo "TEMP=D:\\temp" >> $env:GITHUB_ENV
        echo "TMP=D:\\temp" >> $env:GITHUB_ENV
        New-Item -ItemType Directory -Force -Path D:\temp

    # Set Maven options for all environments
    - name: Set Maven options
      run: echo "MAVEN_OPTS=-Xmx1024m -Djava.io.tmpdir=$RUNNER_TEMP" >> $GITHUB_ENV

    # Build and test
    - name: Build with Maven
      run: mvn -B clean package --file pom.xml

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: application-jar-${{ matrix.os }}-java${{ matrix.java }}
        path: target/*.jar
        retention-days: 3

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: target/
      
      - name: Display structure of downloaded files
        run: ls -R target/

  docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Fetch Docker credentials from Vault
        env:
          VAULT_ADDR: "http://13.233.118.161:8200"
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
        run: |
          echo "Reading Docker credentials from Vault..."
          SECRET_JSON=$(curl --header "X-Vault-Token: $VAULT_TOKEN" \
                             --silent \
                             --request GET \
                             $VAULT_ADDR/v1/kv/data/docker_cred)
          
          DOCKER_USERNAME=$(echo $SECRET_JSON | jq -r '.data.data.DOCKER_USERNAME')
          DOCKER_PASSWORD=$(echo $SECRET_JSON | jq -r '.data.data.DOCKER_PASSWORD')
          
          echo "::add-mask::$DOCKER_USERNAME"
          echo "::add-mask::$DOCKER_PASSWORD"
          
          echo "DOCKER_USERNAME=$DOCKER_USERNAME" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=$DOCKER_PASSWORD" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build and Push Docker Images
        env:
          DOCKER_IMAGE_NAME: "spring-boot-hello-world-for-kamran"
        run: |
          docker build -t ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${GITHUB_SHA} .
          docker build -t ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest .
          
          docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${GITHUB_SHA}
          docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest
