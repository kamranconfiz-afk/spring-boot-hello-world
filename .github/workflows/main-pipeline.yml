name: Main CI/CD Workflow

on:
  push:
    branches: [ "main", "develop", "master" ]

jobs:
  # Call the reusable workflow
  build-test:
    uses: ./.github/workflows/reusable-build-test.yml
    with:
      java-versions: '["8"]'
      os-list: '["ubuntu-latest","windows-latest"]'

  docker:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Download JAR
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/

      # Install jq
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Fetch Docker credentials from Vault
      - name: Fetch Docker credentials from Vault
        env:
          VAULT_ADDR: "http://65.0.135.239:8200"
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
        run: |
          echo "Reading Docker credentials from Vault..."
          SECRET_JSON=$(curl --header "X-Vault-Token: $VAULT_TOKEN" \
                             --silent \
                             --request GET \
                             $VAULT_ADDR/v1/kv/data/docker_cred)

          echo "Parsing credentials..."
          DOCKER_USERNAME=$(echo $SECRET_JSON | jq -r '.data.data.DOCKER_USERNAME')
          DOCKER_PASSWORD=$(echo $SECRET_JSON | jq -r '.data.data.DOCKER_PASSWORD')

          echo "::add-mask::$DOCKER_USERNAME"
          echo "::add-mask::$DOCKER_PASSWORD"

          echo "DOCKER_USERNAME=$DOCKER_USERNAME" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=$DOCKER_PASSWORD" >> $GITHUB_ENV

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Docker Hub
      - name: Login to Docker Hub
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      # Build and Push Docker Images
      - name: Build and Push Docker Images
        env:
          DOCKER_IMAGE_NAME: "spring-boot-hello-world-for-kamran"
        run: |
          echo "Building Docker image..."
          docker build -t ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${GITHUB_SHA} .
          docker tag ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${GITHUB_SHA} ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest

          echo "Pushing Docker images to Docker Hub..."
          docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${GITHUB_SHA}
          docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest
          echo "Docker images pushed successfully!"
